% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/InteRact.R
\name{InteRact}
\alias{InteRact}
\title{Analysis of proteomics data}
\usage{
InteRact(df, Column_gene_name = "Gene.names", Column_score = "Score",
  Column_ID = "Protein.IDs", Column_Npep = NULL, bait_gene_name,
  N_rep = 3, bckg_bait = bait_gene_name, bckg_ctrl = "WT", bckg = NULL,
  time = NULL, bio = NULL, tech = NULL,
  Column_intensity_pattern = "^Intensity.", preffix_bio = "S",
  preffix_tech = "R", preffix_time = "", filter_time = NULL,
  filter_bio = NULL, filter_tech = NULL, updateProgress = NULL)
}
\arguments{
\item{df}{A dataframe containing protein intensities. By default, protein intensity column names start by "Intensity." 
(use parameter \code{Column_intensity_pattern} to change)
Columns might also include "Score" (for protein identification score),
"Gene.names" (for gene names), "Intensity" (for mean protein intensity), 
"iBAQ" (for mean iBAQ intensity) or "Mol..Weight..kDa."
(as expected after importing a proteinGroups.txt file generated by MaxQuant using read.csv ).}

\item{Column_gene_name}{df's column corresponding to gene names}

\item{bait_gene_name}{The gene name of the bait}

\item{N_rep}{number of iteration for the replacement of missing values
(if \code{Nrep}=0, missing values are not replaced)}

\item{bckg_bait}{Τhe name of the bait found in \code{bckg} (see below) or in df's names if \code{bckg} is not provided}

\item{bckg_ctrl}{Τhe name of the control background found in \code{bckg} (see below) or in df's names if \code{bckg} is not provided}

\item{bckg}{Vector of length equal to the number of protein intensity columns indicating which background a column refers to 
(containing either  \code{bckg_bait} or  \code{bckg_ctrl} )}

\item{time}{Vector of length equal to the number of protein intensity columns indicating experimental conditions
(for instance time of stimulation)}

\item{bio}{Vector of length equal to the number of protein intensity columns indicating biological replicates}

\item{tech}{Vector of length equal to the number of protein intensity columns indicating technical replicates}

\item{Column_intensity_pattern}{Pattern (regular exrpression) used to identfy df's columns containing protein intensity values}

\item{preffix_bio}{Preffix for biological replicates in column names (i.e "S" if pattern is "_S1")}

\item{preffix_tech}{Preffix for technical replicates in column names (i.e "R" if pattern is "_R3")}

\item{preffix_time}{Preffix for experimental conditions in column names (i.e "t" if pattern is "_t300")}

\item{filter_time}{vector of experimental conditions to exclude from analysis}

\item{filter_bio}{vector of biological replicates to exclude from analysis}

\item{filter_tech}{vector of technical replicates to exclude from analysis}
}
\value{
a object of class \code{Interactome}, i.e a list including the following elements :
\code{conditions} : a vector of experimental conditions; 
\code{names} : a vector of names (by default gene names are used); 
\code{p_val} : a list of vectors containing the p values associated to each experimental condition; 
\code{fold_change} : a list of vectors containing the fold change associated to each experimental condition; 
\code{...} : other variables
}
\description{
This package implements several functions to analyze Affinity Purification data.
}
\details{
By default, it is configured to work with proteinGroups.txt files
generated by MaxQuant
}
\examples{

#load data :
dir<- system.file("extdata", package = "InteRact")
path <- paste(dir,"/proteinGroups_Cbl.txt",sep="")
df <- read.csv(path, sep="\\t", nrows=-1, fill=TRUE, na.strings="", dec=".")

res <- InteRact(df, bait_gene_name = "Cbl")
Interactome <- res$Interactome
order_list <- get_order_discrete(Interactome)
Interactome <- order_interactome(Interactome, order_list$idx_order)

Interactome <- merge_proteome(Interactome)

annot <- get_annotations(Interactome)
Interactome <- append_annotations(Interactome,  annot)
sum_tbl <- summary_table(Interactome)

# Check which columns have been used along with their description
print.data.frame(res$cond)

# You now have an object of class \\code{InteRactome} that you can plot
Interactome <- res$Interactome
plot(Interactome)
plot_volcanos(Interactome, show_plot = TRUE )

# and manipulate by filtering conditions :
Interactome <- filter_conditions(Interactome, Interactome$conditions[1] )
plot(Interactome)

#or by re-ordering its elements (proteins)
order_list <- get_order_discrete(Interactome)
Interactome <- order_interactome(Interactome, order_list$idx_order)
#Print Interactome by experimental condition :
plot_per_conditions(Interactome, idx_rows = min(30, order_list$Ndetect))

# You can identify columns and their description separately using \\code{identify_conditions()}
cond <- identify_conditions(df, bckg_bait="Cbl")
print.data.frame(cond)
# and use it as parameters for function \\code{InteRact()}
res <- InteRact(df, bait_gene_name = "Cbl", bckg=cond$bckg, time=cond$time, bio=cond$bio, tech=cond$tech)

# You can define your own default pattern for intensity columns :
pattern = "^iBAQ"
cond <- identify_conditions(df, bckg_bait="Cbl", Column_intensity_pattern = pattern))
# Let's check that these column contain numeric variables
sapply( grep(pattern,names(df)), function(x) typeof( df[, x] ) ) 
# Make sure to use the same pattern in function \\code{InteRact()}
res <- InteRact(df, Column_intensity_pattern = pattern, bait_gene_name = "Cbl", bckg=cond$bckg, time=cond$time, bio=cond$bio, tech=cond$tech)

}
\author{
Guillaume Voisinne
}
